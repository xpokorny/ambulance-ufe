/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface XpokyAmbulanceWlApp {
        "basePath": string;
    }
    interface XpokyAmbulanceWlEditor {
        "entryId": string;
    }
    interface XpokyAmbulanceWlList {
    }
}
export interface XpokyAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXpokyAmbulanceWlEditorElement;
}
export interface XpokyAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXpokyAmbulanceWlListElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLXpokyAmbulanceWlAppElement extends Components.XpokyAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLXpokyAmbulanceWlAppElement: {
        prototype: HTMLXpokyAmbulanceWlAppElement;
        new (): HTMLXpokyAmbulanceWlAppElement;
    };
    interface HTMLXpokyAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLXpokyAmbulanceWlEditorElement extends Components.XpokyAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXpokyAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLXpokyAmbulanceWlEditorElement, ev: XpokyAmbulanceWlEditorCustomEvent<HTMLXpokyAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXpokyAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLXpokyAmbulanceWlEditorElement, ev: XpokyAmbulanceWlEditorCustomEvent<HTMLXpokyAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXpokyAmbulanceWlEditorElement: {
        prototype: HTMLXpokyAmbulanceWlEditorElement;
        new (): HTMLXpokyAmbulanceWlEditorElement;
    };
    interface HTMLXpokyAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLXpokyAmbulanceWlListElement extends Components.XpokyAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXpokyAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLXpokyAmbulanceWlListElement, ev: XpokyAmbulanceWlListCustomEvent<HTMLXpokyAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXpokyAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLXpokyAmbulanceWlListElement, ev: XpokyAmbulanceWlListCustomEvent<HTMLXpokyAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXpokyAmbulanceWlListElement: {
        prototype: HTMLXpokyAmbulanceWlListElement;
        new (): HTMLXpokyAmbulanceWlListElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "xpoky-ambulance-wl-app": HTMLXpokyAmbulanceWlAppElement;
        "xpoky-ambulance-wl-editor": HTMLXpokyAmbulanceWlEditorElement;
        "xpoky-ambulance-wl-list": HTMLXpokyAmbulanceWlListElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface XpokyAmbulanceWlApp {
        "basePath"?: string;
    }
    interface XpokyAmbulanceWlEditor {
        "entryId"?: string;
        "onEditor-closed"?: (event: XpokyAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface XpokyAmbulanceWlList {
        "onEntry-clicked"?: (event: XpokyAmbulanceWlListCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "xpoky-ambulance-wl-app": XpokyAmbulanceWlApp;
        "xpoky-ambulance-wl-editor": XpokyAmbulanceWlEditor;
        "xpoky-ambulance-wl-list": XpokyAmbulanceWlList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "xpoky-ambulance-wl-app": LocalJSX.XpokyAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLXpokyAmbulanceWlAppElement>;
            "xpoky-ambulance-wl-editor": LocalJSX.XpokyAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLXpokyAmbulanceWlEditorElement>;
            "xpoky-ambulance-wl-list": LocalJSX.XpokyAmbulanceWlList & JSXBase.HTMLAttributes<HTMLXpokyAmbulanceWlListElement>;
        }
    }
}
