/* tslint:disable */
/* eslint-disable */
/**
 * Appointment Scheduling Api
 * Medical Appointment Scheduling System
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xpokorny@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Appointment,
} from '../models';
import {
    AppointmentFromJSON,
    AppointmentToJSON,
} from '../models';

export interface CreateAppointmentRequest {
    appointment: Appointment;
}

export interface DeleteAppointmentRequest {
    appointmentId: string;
}

export interface GetAppointmentRequest {
    appointmentId: string;
}

export interface GetAppointmentsRequest {
    userId?: string;
    role?: GetAppointmentsRoleEnum;
}

export interface UpdateAppointmentRequest {
    appointmentId: string;
    appointment: Appointment;
}

/**
 * AppointmentsApi - interface
 * 
 * @export
 * @interface AppointmentsApiInterface
 */
export interface AppointmentsApiInterface {
    /**
     * Use this method to create a new appointment
     * @summary Create a new appointment
     * @param {Appointment} appointment Appointment details to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsApiInterface
     */
    createAppointmentRaw(requestParameters: CreateAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>>;

    /**
     * Use this method to create a new appointment
     * Create a new appointment
     */
    createAppointment(requestParameters: CreateAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment>;

    /**
     * Use this method to delete a specific appointment
     * @summary Delete an appointment
     * @param {string} appointmentId ID of the appointment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsApiInterface
     */
    deleteAppointmentRaw(requestParameters: DeleteAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Use this method to delete a specific appointment
     * Delete an appointment
     */
    deleteAppointment(requestParameters: DeleteAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Use this method to get details of a specific appointment
     * @summary Get appointment details
     * @param {string} appointmentId ID of the appointment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsApiInterface
     */
    getAppointmentRaw(requestParameters: GetAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>>;

    /**
     * Use this method to get details of a specific appointment
     * Get appointment details
     */
    getAppointment(requestParameters: GetAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment>;

    /**
     * Use this method to get all appointments, or filter by user
     * @summary Get all appointments
     * @param {string} [userId] ID of the user (optional, filters appointments where user is patient or creator)
     * @param {'patient' | 'creator'} [role] Filter by role (patient or creator)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsApiInterface
     */
    getAppointmentsRaw(requestParameters: GetAppointmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Appointment>>>;

    /**
     * Use this method to get all appointments, or filter by user
     * Get all appointments
     */
    getAppointments(requestParameters: GetAppointmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Appointment>>;

    /**
     * Use this method to update an existing appointment
     * @summary Update an appointment
     * @param {string} appointmentId ID of the appointment
     * @param {Appointment} appointment Updated appointment details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsApiInterface
     */
    updateAppointmentRaw(requestParameters: UpdateAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>>;

    /**
     * Use this method to update an existing appointment
     * Update an appointment
     */
    updateAppointment(requestParameters: UpdateAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment>;

}

/**
 * 
 */
export class AppointmentsApi extends runtime.BaseAPI implements AppointmentsApiInterface {

    /**
     * Use this method to create a new appointment
     * Create a new appointment
     */
    async createAppointmentRaw(requestParameters: CreateAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>> {
        if (requestParameters.appointment === null || requestParameters.appointment === undefined) {
            throw new runtime.RequiredError('appointment','Required parameter requestParameters.appointment was null or undefined when calling createAppointment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/appointments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentToJSON(requestParameters.appointment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentFromJSON(jsonValue));
    }

    /**
     * Use this method to create a new appointment
     * Create a new appointment
     */
    async createAppointment(requestParameters: CreateAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment> {
        const response = await this.createAppointmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this method to delete a specific appointment
     * Delete an appointment
     */
    async deleteAppointmentRaw(requestParameters: DeleteAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appointmentId === null || requestParameters.appointmentId === undefined) {
            throw new runtime.RequiredError('appointmentId','Required parameter requestParameters.appointmentId was null or undefined when calling deleteAppointment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments/{appointmentId}`.replace(`{${"appointmentId"}}`, encodeURIComponent(String(requestParameters.appointmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this method to delete a specific appointment
     * Delete an appointment
     */
    async deleteAppointment(requestParameters: DeleteAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAppointmentRaw(requestParameters, initOverrides);
    }

    /**
     * Use this method to get details of a specific appointment
     * Get appointment details
     */
    async getAppointmentRaw(requestParameters: GetAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>> {
        if (requestParameters.appointmentId === null || requestParameters.appointmentId === undefined) {
            throw new runtime.RequiredError('appointmentId','Required parameter requestParameters.appointmentId was null or undefined when calling getAppointment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments/{appointmentId}`.replace(`{${"appointmentId"}}`, encodeURIComponent(String(requestParameters.appointmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentFromJSON(jsonValue));
    }

    /**
     * Use this method to get details of a specific appointment
     * Get appointment details
     */
    async getAppointment(requestParameters: GetAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment> {
        const response = await this.getAppointmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this method to get all appointments, or filter by user
     * Get all appointments
     */
    async getAppointmentsRaw(requestParameters: GetAppointmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Appointment>>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppointmentFromJSON));
    }

    /**
     * Use this method to get all appointments, or filter by user
     * Get all appointments
     */
    async getAppointments(requestParameters: GetAppointmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Appointment>> {
        const response = await this.getAppointmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this method to update an existing appointment
     * Update an appointment
     */
    async updateAppointmentRaw(requestParameters: UpdateAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>> {
        if (requestParameters.appointmentId === null || requestParameters.appointmentId === undefined) {
            throw new runtime.RequiredError('appointmentId','Required parameter requestParameters.appointmentId was null or undefined when calling updateAppointment.');
        }

        if (requestParameters.appointment === null || requestParameters.appointment === undefined) {
            throw new runtime.RequiredError('appointment','Required parameter requestParameters.appointment was null or undefined when calling updateAppointment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/appointments/{appointmentId}`.replace(`{${"appointmentId"}}`, encodeURIComponent(String(requestParameters.appointmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentToJSON(requestParameters.appointment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentFromJSON(jsonValue));
    }

    /**
     * Use this method to update an existing appointment
     * Update an appointment
     */
    async updateAppointment(requestParameters: UpdateAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment> {
        const response = await this.updateAppointmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAppointmentsRoleEnum = {
    Patient: 'patient',
    Creator: 'creator'
} as const;
export type GetAppointmentsRoleEnum = typeof GetAppointmentsRoleEnum[keyof typeof GetAppointmentsRoleEnum];
